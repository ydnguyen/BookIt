
package GUI;

import javax.swing.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.table.*;

import DataManagement.ConsumerDao;
import DataManagement.ServiceProviderDao;
import ServiceProvider.ProviderCalendar;

import java.awt.event.*;
import javax.swing.UIManager.LookAndFeelInfo;

public class BookIt extends javax.swing.JFrame {
    
    /** Creates new form Find */
    public BookIt() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jConsumerButton = new javax.swing.JButton();
        jSPButton = new javax.swing.JButton();
        jRolePrompt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BookIt");

        jConsumerButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jConsumerButton.setText("Consumer");
        jConsumerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConsumerButtonActionPerformed(evt);
            }
        });

        jSPButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jSPButton.setText("Service Provider");
        jSPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSPButtonActionPerformed(evt);
            }
        });

        jRolePrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jRolePrompt.setText("Welcome! Please select your role:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(0, 136, Short.MAX_VALUE)
                .add(jRolePrompt)
                .add(136, 136, 136))
            .add(layout.createSequentialGroup()
                .add(175, 175, 175)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jSPButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jConsumerButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(67, 67, 67)
                .add(jRolePrompt)
                .add(31, 31, 31)
                .add(jSPButton)
                .add(27, 27, 27)
                .add(jConsumerButton)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    /*
    private void consumerSignUp() {


        jPanel1 = new javax.swing.JPanel();
        jConsumerFirstLabel = new javax.swing.JLabel();
        jConsumerLastLabel = new javax.swing.JLabel();
        jConsumerFirstField = new javax.swing.JTextField();
        jConsumerLastField = new javax.swing.JTextField();
        jConsumerUsernameLabel = new javax.swing.JLabel();
        jConsumerUsernameField = new javax.swing.JTextField();
        jConsumerPasswordLabel = new javax.swing.JLabel();
        jConsumerPasswordField = new javax.swing.JTextField();
        jConsumerAddressLabel = new javax.swing.JLabel();
        jConsumerAddressField = new javax.swing.JTextField();
        jConsumerEmailField = new javax.swing.JTextField();
        jConsumerCancelButton = new javax.swing.JButton();
        jConsumerOKButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Consumer Sign-up");

        //Hide previous panel's items
        jLoginButton.setVisible(false);
        jSignupButton.setVisible(false);
        jLSPrompt.setVisible(false);
        
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(" Sign-up Information "));

        jConsumerFirstLabel.setText("First Name:");

        jConsumerLastLabel.setText("Last Name:");

        jConsumerUsernameLabel.setText("Username");

        jConsumerPasswordLabel.setText("Password:");

        jConsumerAddressLabel.setText("Address:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(30, 30, 30)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jConsumerAddressLabel)
                    .add(jConsumerUsernameLabel)
                    .add(jConsumerFirstLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jConsumerUsernameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jConsumerFirstField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jConsumerLastLabel)
                            .add(jConsumerPasswordLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jConsumerLastField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .add(jConsumerPasswordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)))
                    .add(jConsumerAddressField))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jConsumerFirstLabel)
                    .add(jConsumerLastField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jConsumerFirstField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jConsumerLastLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jConsumerUsernameLabel)
                    .add(jConsumerPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jConsumerPasswordLabel)
                    .add(jConsumerUsernameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jConsumerAddressField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jConsumerAddressLabel))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jConsumerCancelButton.setText("Cancel");
        jConsumerCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToUserSelection(evt);
            };
        });

        jConsumerOKButton.setText("OK");
        //jConsumerOKButton.addActionListener(new java.awt.event.ActionListener() {
        //    public void actionPerformed(java.awt.event.ActionEvent evt) {
        //        recordConsumerSignUp(evt);
        //    };
        //});
        
        
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jConsumerOKButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jConsumerCancelButton))
                    .add(jPanel1, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jConsumerCancelButton, jConsumerOKButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jConsumerCancelButton)
                    .add(jConsumerOKButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                    
    */    
        
    private void chooseLoginSignup() {

        jSignupButton = new javax.swing.JButton();
        jLoginButton = new javax.swing.JButton();
        jLSPrompt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BookIt");

		//Hide previous panel's items
        jConsumerButton.setVisible(false);
        jSPButton.setVisible(false);
        jRolePrompt.setVisible(false);
        
		
        jSignupButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jSignupButton.setText("Signup");
        jSignupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSignupButtonActionPerformed(evt);
            }
        });

        jLoginButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLoginButton.setText("Login");
        jLoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoginButtonActionPerformed(evt);
            }
        });

        jLSPrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLSPrompt.setText("What would you like to do?");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(0, 136, Short.MAX_VALUE)
                .add(jLSPrompt)
                .add(136, 136, 136))
            .add(layout.createSequentialGroup()
                .add(175, 175, 175)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLoginButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jSignupButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(67, 67, 67)
                .add(jLSPrompt)
                .add(31, 31, 31)
                .add(jLoginButton)
                .add(27, 27, 27)
                .add(jSignupButton)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        
    
        
    private void showLoginScreen() {

        jLoginProceedButton = new javax.swing.JButton();
        jUsernamePasswordPrompt = new javax.swing.JLabel();
        jUsernameLabel = new javax.swing.JLabel();
        jPasswordLabel = new javax.swing.JLabel();
        jUsernameField = new javax.swing.JTextField();
        jPasswordField = new javax.swing.JPasswordField(); //yn

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login Screen");

        //Hide previous panel's items
        jLoginButton.setVisible(false);
        jSignupButton.setVisible(false);
        jLSPrompt.setVisible(false);
        
        jLoginProceedButton.setText("Login");
        jLoginProceedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoginProceedButtonActionPerformed(evt);
            }
        });

        jUsernamePasswordPrompt.setText("Please enter your username and password:");

        jUsernameLabel.setText("Username:");

        jPasswordLabel.setText("Password:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLoginProceedButton))
                    .add(layout.createSequentialGroup()
                        .add(51, 51, 51)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPasswordLabel)
                            .add(jUsernameLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jUsernameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 214, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 214, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 51, Short.MAX_VALUE)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jUsernamePasswordPrompt)
                .add(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jUsernamePasswordPrompt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jUsernameLabel)
                    .add(jUsernameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jPasswordLabel)
                    .add(jPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 25, Short.MAX_VALUE)
                .add(jLoginProceedButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>               
        
    private void showConsumerActions() {

        jConsumerBookButton = new javax.swing.JButton();
        jConsumerActionPrompt = new javax.swing.JLabel();
        jConsumerCancelApptButton = new javax.swing.JButton();
        jConsumerViewCalendarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Consumer Actions List");

        //Hide previous panel's items
        jLoginProceedButton.setVisible(false);
        jPasswordField.setVisible(false);
        jPasswordLabel.setVisible(false);
        jUsernameField.setVisible(false);
        jUsernameLabel.setVisible(false);
        jUsernamePasswordPrompt.setVisible(false);
        
        
        jConsumerBookButton.setText("Book a new appointment");
        jConsumerBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConsumerBookButtonActionPerformed(evt);
            }
        });

        jConsumerActionPrompt.setText("Please select an action from the list below:");

        jConsumerCancelApptButton.setText("Cancel an existing appointment");
        jConsumerCancelApptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConsumerCancelApptButtonActionPerformed(evt);
            }
        });

        jConsumerViewCalendarButton.setText("View your calendar");
        jConsumerViewCalendarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConsumerViewCalendarButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(0, 98, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jConsumerActionPrompt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jConsumerBookButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jConsumerCancelApptButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jConsumerViewCalendarButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jConsumerActionPrompt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jConsumerBookButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jConsumerCancelApptButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jConsumerViewCalendarButton)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>     
    
    private void showSPActions() {

        jSPBookButton = new javax.swing.JButton();
        jSPActionPrompt = new javax.swing.JLabel();
        jSPCancelApptButton = new javax.swing.JButton();
        jSPViewCalendarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Service Provider Actions List");

        //Hide previous panel's items
        jLoginProceedButton.setVisible(false);
        jPasswordField.setVisible(false);
        jPasswordLabel.setVisible(false);
        jUsernameField.setVisible(false);
        jUsernameLabel.setVisible(false);
        jUsernamePasswordPrompt.setVisible(false);
        
        
        jSPBookButton.setText("Book a new appointment");
        jSPBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSPBookButtonActionPerformed(evt);
            }
        });

        jSPActionPrompt.setText("Please select an action from the list below:");

        jSPCancelApptButton.setText("Cancel an existing appointment");
        jSPCancelApptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSPCancelApptButtonActionPerformed(evt);
            }
        });

        jSPViewCalendarButton.setText("View your calendar");
        jSPViewCalendarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSPViewCalendarButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(0, 98, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jSPActionPrompt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jSPBookButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jSPCancelApptButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jSPViewCalendarButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jSPActionPrompt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jSPBookButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSPCancelApptButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSPViewCalendarButton)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>     
    
    private void jConsumerButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        //System.out.println("Consumer button pressed!");
        clientType = "Consumer";
        chooseLoginSignup();
    }                                               

    private void jSPButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        //System.out.println("Service Provider button pressed!");
        clientType = "Service Provider";
        chooseLoginSignup();        
    }                                         
    
    private void jLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //System.out.println("To be implemented...");
        
        showLoginScreen();
    }
    
    private void jSignupButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //consumerSignUp();
        if( clientType.equals("Consumer") )
        {
            new ConsumerSignUp().setVisible(true);
        }
        else if( clientType.equals("Service Provider") )
        {
            new ServiceProviderSignUp().setVisible(true);
        }
    }

    
    private void returnToUserSelection(java.awt.event.ActionEvent evt) {
        System.out.println("To be implemented...");
    }
    
    private void jLoginProceedButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //System.out.println("To be implemented...");
  
    	String[] str = new String[2];
    	
    	str[0] = jUsernameField.getText();
    	str[1] = jPasswordField.getText();
  
    	if(clientType.equals("Consumer")) {
    		consumer_id = ConsumerDao.verifyConsumer(str);
    		if(!consumer_id.equals("")) {
    			showConsumerActions();
    		}
    		else
            {
                //System.out.println( "Incorrect username or password!" );
                jUsernamePasswordPrompt.setText( "Incorrect username or password! Please try again!" );
            }
    	}
    	
    	if(clientType.equals("Service Provider")) {
    		provider_id = ServiceProviderDao.verifyProvider(str);
    		if(!provider_id.equals("")) {
    			showSPActions();
    		}
    		
    		else
            {
                //System.out.println( "Incorrect username or password!" );
                jUsernamePasswordPrompt.setText( "Incorrect username or password! Please try again!" );
            }
    	}
    	
    	/*consumer_id = ConsumerDao.verifyConsumer(str);
    	
        if(!consumer_id.equals(""))
        {
            //System.out.println( "Authenticated!" );
            if( clientType.equals("Consumer") )
            {
                showConsumerActions();
            }
            else if( clientType.equals("Service Provider") )
            {
                showSPActions();
            }
        }
        else
        {
            //System.out.println( "Incorrect username or password!" );
            jUsernamePasswordPrompt.setText( "Incorrect username or password! Please try again!" );
        }*/
        
    }
    
    private void jConsumerBookButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ConsumerBook consumerBook = new ConsumerBook();
        consumerBook.consumer_id = this.consumer_id;
        consumerBook.setVisible(true);
    }
        
    private void jConsumerCancelApptButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ConsumerShowAppts consumerShowAppts = new ConsumerShowAppts();
        consumerApptList = Consumer.Calendar.getConsumerCalendar(consumer_id);
        System.out.println("ConsumerList: " + consumerApptList);
        consumerShowAppts.populateApptsTable(consumerApptList);
        //System.out.println(this.consumerApptList);
        //System.out.println(consumerShowAppts.consumerApptList);
        consumerShowAppts.setVisible(true);
    }    
        
    private void jConsumerViewCalendarButtonActionPerformed(java.awt.event.ActionEvent evt) {
        
        //----------------testing purpose only-----------------------------------
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");        
        List sortedDate = new ArrayList( dateRange );
        Collections.sort(sortedDate);
        
        //System.out.println(dateRange.size());
        
        int[] timeRange = {9, 21};
        int numRows = (timeRange[1] - timeRange[0]) * 2;
        
        //----------------actual code-----------------------------------
        String[] dateList = new String[dateRange.size()+1];
        final Class[] types = new Class[dateRange.size()+1];
        Iterator dateIter = sortedDate.iterator();
        int index = 1;
        while (dateIter.hasNext())
        {
            Date currDate = (Date) dateIter.next();
            dateList[index] = currDate.toString();
            types[index] = java.lang.String.class;
            ++index;
        }
        
        dateList[0] = "";
        types[0] = java.lang.String.class;
          
        JTable jCalendar = new JTable();
        jCalendar.setModel(new javax.swing.table.DefaultTableModel(
           new Object [][] {},
           dateList
        ) {
           public Class getColumnClass(int columnIndex) {
               return types [columnIndex];
           }
        });
        TableColumnModel columnModel = jCalendar.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(50);
        for( int i = 1; i<(dateRange.size()+1); ++i )
        {
            columnModel.getColumn(i).setPreferredWidth(100);
            columnModel.getColumn(i).setCellRenderer( new CustomRenderer() );
        }
        DefaultTableModel model = (DefaultTableModel) jCalendar.getModel();
        
        model.setRowCount(0);

        for( int i=0; i<numRows; ++i )
        {
            if( i%2 == 0 )
            {
                model.addRow(new Object[]{ (Integer.toString(timeRange[0] + i/2)) + ":00", "","","","","","","" });
            }
            else if( i%2 == 1 )
            {
                model.addRow(new Object[]{ (Integer.toString(timeRange[0] + i/2)) + ":30", "","","","","","","" });                
            }
        }
        
        JScrollPane jCalendarScroll = new JScrollPane(jCalendar);
        /*
        JPanel jCalendarScroll = new JPanel();
        jCalendarScroll.add(jCalendar);
        */
		consumerApptList = Consumer.Calendar.getConsumerCalendar(consumer_id);
        Iterator apptIter = consumerApptList.iterator();
        while(apptIter.hasNext())
        {

            String testStr = (String) apptIter.next();
            //System.out.println(testStr);
            String businessName = testStr.substring(0, testStr.indexOf(' '));
            testStr = testStr.substring(testStr.indexOf(' ')+1, testStr.length());
            String date = testStr.substring(0, testStr.indexOf(' '));
            testStr = testStr.substring(testStr.indexOf(' ')+1, testStr.length());
            String startTime = testStr.substring(0, testStr.indexOf(' '));
            testStr = testStr.substring(testStr.indexOf(' ')+1, testStr.length());
            String endTime = testStr.substring(0, testStr.indexOf(' '));

            int numCols = columnModel.getColumnCount();
            //System.out.println(numCols);
            int desiredCol = -1;
            DateFormat colFormat = new SimpleDateFormat("EEE MMM dd hh:mm:ss zzz yyyy", Locale.ENGLISH);
            try
            {
                for( int i=1; i<numCols; ++i )
                {
                    //System.out.println(jCalendar.getColumnName(i));
                    Date colDate = colFormat.parse(jCalendar.getColumnName(i));
                    //System.out.println("colDate is " + colDate + " and date is: " + date);                    
                    //System.out.println(colDate.compareTo(dateFormat.parse(date)));
                    if( colDate.compareTo(dateFormat.parse(date)) == 0 )
                    {
                        desiredCol = i;
                    }
                }
            }
            catch( Exception ex ) 
            { 
                System.out.println(ex.getMessage()); 
            }
            for( int i=0; i<jCalendar.getRowCount(); ++i )
            {
                String hour = (String) jCalendar.getValueAt(i, 0);
                int currHour = Integer.parseInt(hour.substring(0,hour.indexOf(':')));
                int startHour = Integer.parseInt(startTime.substring(0, startTime.indexOf(':')));
                int endHour = Integer.parseInt(endTime.substring(0, endTime.indexOf(':')));
                //end at *:00
                //yn-start
                if( startHour != endHour )
                {
                    if( endTime.substring(endTime.indexOf(':')+1, endTime.length()).equals("00") )
                    {
                        if( currHour >= startHour && currHour < endHour )
                        {
                            jCalendar.setValueAt("yes", i, desiredCol);
                        }
                    }
                    else if( endTime.substring(endTime.indexOf(':')+1, endTime.length()).equals("30") )
                    {
                        if( currHour >= startHour && currHour < endHour )
                        {
                            jCalendar.setValueAt("yes", i, desiredCol);
                            jCalendar.setValueAt("yes", i+1, desiredCol);
                        }
                    }
                    if( startTime.substring(startTime.indexOf(':')+1, startTime.length()).equals("30") )
                    {
                        if( currHour == startHour && (hour.substring(hour.indexOf(':')+1, hour.length()).equals("00")) )
                        {
                            jCalendar.setValueAt("", i, desiredCol);
                        }
                    }
                }
                else
                {
                    if( hour.equals(startTime) )
                    {
                        jCalendar.setValueAt("yes", i, desiredCol);                        
                    }
                }
                //yn-end
            }
        }
        jCalendarScroll.setSize(800,jCalendar.getRowHeight()*(numRows+2));

        if( !consumerPopUpOpened )
        {
            //System.out.println("Showing pop-up.");
            consumerPopUpOpened = true;
            jCalendarPopup = new JPopupMenu();
            jCalendarPopup.setLayout(new BorderLayout());
            //jCalendarPopup.setLocation(500, 500);
            jCalendarPopup.setVisible(true);
            jCalendarPopup.setPopupSize(800,jCalendar.getRowHeight()*(numRows+2));
            jCalendarPopup.add(jCalendarScroll);
            jConsumerViewCalendarButton.setText("Close calendar view");
        }
        else
        {
            //System.out.println("Removing pop-up.");
            jCalendarPopup.setVisible(false);
            consumerPopUpOpened = false;
            jConsumerViewCalendarButton.setText("View your calendar");
        }
    }  
    
    private void jSPBookButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //new SPBook().setVisible(true);
        SPBook spBook = new SPBook();
        spBook.provider_id = this.provider_id;
        spBook.setVisible(true);
    }
    private void jSPCancelApptButtonActionPerformed(java.awt.event.ActionEvent evt) {
        SPShowAppts spShowAppts = new SPShowAppts();
        spApptList = ProviderCalendar.getSPCalendar(provider_id);
        spShowAppts.populateApptsTable(spApptList);
        //System.out.println(this.spApptList);
        //System.out.println(consumerShowAppts.spApptList);
        spShowAppts.setVisible(true);
    }
    private void jSPViewCalendarButtonActionPerformed(java.awt.event.ActionEvent evt) {
        
        //----------------testing purpose only-----------------------------------
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");        
        List sortedDate = new ArrayList( dateRange );
        Collections.sort(sortedDate);
        
        //System.out.println(dateRange.size());
        
        int[] timeRange = {9, 21};
        int numRows = (timeRange[1] - timeRange[0]) * 2;
        
        //----------------actual code-----------------------------------
        String[] dateList = new String[dateRange.size()+1];
        final Class[] types = new Class[dateRange.size()+1];
        Iterator dateIter = sortedDate.iterator();
        int index = 1;
        while (dateIter.hasNext())
        {
            Date currDate = (Date) dateIter.next();
            dateList[index] = currDate.toString();
            types[index] = java.lang.String.class;
            ++index;
        }
        
        dateList[0] = "";
        types[0] = java.lang.String.class;
          
        JTable jCalendar = new JTable();
        jCalendar.setModel(new javax.swing.table.DefaultTableModel(
           new Object [][] {},
           dateList
        ) {
           public Class getColumnClass(int columnIndex) {
               return types [columnIndex];
           }
        });
        TableColumnModel columnModel = jCalendar.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(50);
        for( int i = 1; i<(dateRange.size()+1); ++i )
        {
            columnModel.getColumn(i).setPreferredWidth(100);
            columnModel.getColumn(i).setCellRenderer( new CustomRenderer() );
        }
        DefaultTableModel model = (DefaultTableModel) jCalendar.getModel();
        
        model.setRowCount(0);

        for( int i=0; i<numRows; ++i )
        {
            if( i%2 == 0 )
            {
                model.addRow(new Object[]{ (Integer.toString(timeRange[0] + i/2)) + ":00", "","","","","","","" });
            }
            else if( i%2 == 1 )
            {
                model.addRow(new Object[]{ (Integer.toString(timeRange[0] + i/2)) + ":30", "","","","","","","" });                
            }
        }
        
        JScrollPane jCalendarScroll = new JScrollPane(jCalendar);
        /*
        JPanel jCalendarScroll = new JPanel();
        jCalendarScroll.add(jCalendar);
        */
        spApptList = ProviderCalendar.getSPCalendar(provider_id);
        
        Iterator apptIter = spApptList.iterator();
        while(apptIter.hasNext())
        {

            String testStr = (String) apptIter.next();
            String businessName = testStr.substring(0, testStr.indexOf(' '));
            testStr = testStr.substring(testStr.indexOf(' ')+1, testStr.length());
            String date = testStr.substring(0, testStr.indexOf(' '));
            testStr = testStr.substring(testStr.indexOf(' ')+1, testStr.length());
            String startTime = testStr.substring(0, testStr.indexOf(' '));
            testStr = testStr.substring(testStr.indexOf(' ')+1, testStr.length());
            String endTime = testStr.substring(0, testStr.indexOf(' '));

            int numCols = columnModel.getColumnCount();
            //System.out.println(numCols);
            int desiredCol = -1;
            DateFormat colFormat = new SimpleDateFormat("EEE MMM dd hh:mm:ss zzz yyyy", Locale.ENGLISH);
            try
            {
                for( int i=1; i<numCols; ++i )
                {
                    //System.out.println(jCalendar.getColumnName(i));
                    Date colDate = colFormat.parse(jCalendar.getColumnName(i));
                    //System.out.println(colDate.compareTo(dateFormat.parse(date)));
                    if( colDate.compareTo(dateFormat.parse(date)) == 0 )
                    {
                        desiredCol = i;
                    }
                }
            }
            catch( Exception ex ) 
            { 
                System.out.println(ex.getMessage()); 
            }

            for( int i=0; i<jCalendar.getRowCount(); ++i )
            {
                String hour = (String) jCalendar.getValueAt(i, 0);
                int currHour = Integer.parseInt(hour.substring(0,hour.indexOf(':')));
                int startHour = Integer.parseInt(startTime.substring(0, startTime.indexOf(':')));
                int endHour = Integer.parseInt(endTime.substring(0, endTime.indexOf(':')));
                //end at *:00
                //yn-start
                if( startHour != endHour )
                {
                    if( endTime.substring(endTime.indexOf(':')+1, endTime.length()).equals("00") )
                    {
                        if( currHour >= startHour && currHour < endHour )
                        {
                            jCalendar.setValueAt("yes", i, desiredCol);
                        }
                    }
                    else if( endTime.substring(endTime.indexOf(':')+1, endTime.length()).equals("30") )
                    {
                        if( currHour >= startHour && currHour < endHour )
                        {
                            jCalendar.setValueAt("yes", i, desiredCol);
                            jCalendar.setValueAt("yes", i+1, desiredCol);
                        }
                    }
                    if( startTime.substring(startTime.indexOf(':')+1, startTime.length()).equals("30") )
                    {
                        if( currHour == startHour && (hour.substring(hour.indexOf(':')+1, hour.length()).equals("00")) )
                        {
                            jCalendar.setValueAt("", i, desiredCol);
                        }
                    }
                }
                else
                {
                    if( hour.equals(startTime) )
                    {
                        jCalendar.setValueAt("yes", i, desiredCol);                        
                    }
                }
                //yn-end
            }
        }
        jCalendarScroll.setSize(800,jCalendar.getRowHeight()*(numRows+2));

        if( !spPopUpOpened )
        {
            //System.out.println("Showing pop-up.");
            spPopUpOpened = true;
            jCalendarPopup = new JPopupMenu();
            jCalendarPopup.setLayout(new BorderLayout());
            jCalendarPopup.setVisible(true);
            jCalendarPopup.setPopupSize(800,jCalendar.getRowHeight()*(numRows+2));
            jCalendarPopup.add(jCalendarScroll);
            jSPViewCalendarButton.setText("Close calendar view");
        }
        else
        {
            //System.out.println("Removing pop-up.");
            jCalendarPopup.setVisible(false);
            spPopUpOpened = false;
            jSPViewCalendarButton.setText("View your calendar");
        }        
    }
    
    class CustomRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
        {
            JLabel c = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            //System.out.println(c.getText().equals("yes"));
            if( c.getText().equals("yes") )
            {
                c.setBackground(Color.GREEN);
                c.setText("");
            }
            else
            {
                c.setBackground(Color.WHITE);
            }
            return c;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookIt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookIt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookIt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookIt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
                
        try {// UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if (info.getName().equals("Nimbus")) {
                    UIManager.setLookAndFeel(info.getClassName());
                    UIDefaults defaults = UIManager.getLookAndFeelDefaults();
                    defaults.put("Table.gridColor", new Color (214,217,223));
                    defaults.put("Table.disabled", false);
                    defaults.put("Table.showGrid", true);
                    defaults.put("Table.intercellSpacing", new Dimension(1, 1));
                    break;
                }
            }
        } catch (Exception e) {
            //e.printStackTrace();
        }
        
        dateRange = new HashSet<Date>();
        
        DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
        Calendar cal = Calendar.getInstance();                
        try
        {
            
            for( int i=0; i<7; i++ )
            {
                dateRange.add( dateFormat.parse(    dateFormat.format(cal.getTime())   ) );
                cal.add(Calendar.DAY_OF_MONTH, 1);
            }

            //System.out.println( dateRange );
        }
        catch(Exception ex) {}
        
        //consumerApptList.add("Dance_Dance 03-07-2016 10:00 11:30 a1156");
        //consumerApptList.add("Computer_on_Fire 03-09-2016 10:30 11:00 b1156");
        //consumerApptList.add("code 2016-03-07 18:00 18:30 1002");
        //consumerApptList.add("dance 2016-03-08 10:30 11:00 6013");
        //consumerApptList.add("code 2016-03-09 17:00 17:30 1001");
        //consumerApptList.add("leetcode 2016-03-10 10:30 11:00 6990");
        //spApptList.add("Tim_Smith 03-08-2016 13:00 15:30 a1156");
        //spApptList.add("Joe_Smith 03-11-2016 10:00 12:30 a1156");        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookIt().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jConsumerButton;
    private javax.swing.JLabel jRolePrompt;
    private javax.swing.JButton jSPButton;
    // End of variables declaration                   
    
    private javax.swing.JButton jLoginButton;
    private javax.swing.JButton jSignupButton;

    private javax.swing.JLabel jLSPrompt;
    
    private javax.swing.JButton jLoginProceedButton;
    private javax.swing.JTextField jPasswordField;
    private javax.swing.JLabel jPasswordLabel;
    private javax.swing.JTextField jUsernameField;
    private javax.swing.JLabel jUsernameLabel;
    private javax.swing.JLabel jUsernamePasswordPrompt;
    
    private javax.swing.JLabel jConsumerActionPrompt;
    private javax.swing.JButton jConsumerBookButton;
    private javax.swing.JButton jConsumerCancelApptButton;
    private javax.swing.JButton jConsumerViewCalendarButton;
    
    private javax.swing.JLabel jSPActionPrompt;
    private javax.swing.JButton jSPBookButton;
    private javax.swing.JButton jSPCancelApptButton;
    private javax.swing.JButton jSPViewCalendarButton;    
    
    //variables for calendar view
    private static javax.swing.JPopupMenu jCalendarPopup;
    private String clientType;
	
	private String defaultUsername = "user";
    private String defaultPassword = "password";
    private static HashSet<Date> dateRange;
    private boolean consumerPopUpOpened = false;
    private boolean spPopUpOpened = false;
    private static HashSet<String> consumerApptList = new HashSet<String>();
    private static HashSet<String> spApptList = new HashSet<String>();
    private static String consumer_id = "";
    private static String provider_id ="";
	
}